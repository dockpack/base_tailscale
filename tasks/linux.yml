---
# Standards: 0.2
# yamllint disable rule:line-length

# Debian Linux
- block:
    - name: Set platform facts
      set_fact:
        distro: "{{ ansible_distribution | lower }}"
        major: "{{ ansible_distribution_release }}"

    - name: Install tailscale gpg key
      apt_key:
        state: present
        url: 'https://pkgs.tailscale.com/stable/{{ distro }}/{{ major }}.gpg'

    - name: Install tailscale Debian repo
      apt_repository:
        repo: 'deb https://pkgs.tailscale.com/stable/{{ distro }} {{ major }} main'
        filename: tailscale.list
  when:
    - ansible_os_family == 'Debian'

# RedHat Linux

# https://tailscale.com/kb/1048/install-centos-7
# https://tailscale.com/kb/1051/install-centos-8
- name: Set distro toCentOS
  when: ansible_distribution == 'CentOS'
  set_fact:
    distro: 'centos'

# https://tailscale.com/kb/1050/install-fedora
- name: Set distro to Fedora
  when: ansible_distribution == 'Fedora'
  set_fact:
    distro: 'fedora'
    major: ''

# https://tailscale.com/kb/1046/install-rhel-8
- name: Set platform infix
  when: ansible_distribution == 'RedHat' or ansible_distribution == 'Rocky'
  set_fact:
    distro: 'rhel'

- name: Set major
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution != 'Fedora'
  set_fact:
    major: "/{{ ansible_distribution_major_version }}"

- name: Install tailscale Yum repo
  get_url:
    url: "https://pkgs.tailscale.com/stable/{{ distro }}{{ major }}/tailscale.repo"
    dest: /etc/yum.repos.d/tailscale.repo
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family == 'RedHat'

# Linux
- name: Install tailscale package
  package:
    name: tailscale
    state: present
  when: ansible_os_family in ['RedHat', 'Debian']

- name: Enable tailscaled
  systemd:
    name: tailscaled
    enabled: true
    state: started

- name: Validate tailscale_authkey
  assert:
    that:
      - tailscale_authkey is defined
      - tailscale_authkey|length >= 30
    quiet: true
    success_msg: 'TAILSCALE_AUTHKEY is valid'
  register: authorization
  ignore_errors: true

- name: Check if tailscale is up
  command: tailscale status
  register: status
  failed_when: status.rc|int > 1
  changed_when: false

- set_fact:
    standard_tag_set:
      - "tag:{{ tag_environment }}"
      - "tag:{{ tag_type }}"
      - "tag:{{ tag_chain }}"
      - "tag:{{ tag_network }}"
      - "tag:{{ tag_region }}"
      - "tag:{{ tag_cloud }}"
- debug:
    var: standard_tag_set
    verbosity: 2
- debug:
    var: tailscale_tags
    verbosity: 2

- set_fact:
    tailscale_tags_tag_set: "{{ tailscale_tags | list | map('regex_replace','^(tag:)?(.+)$','tag:\\2') }}"
- debug:
    var: tailscale_tags_tag_set
    verbosity: 2

- set_fact:
    union_tag_set: "{{ standard_tag_set | union(tailscale_tags_tag_set) }}"
- debug:
    var: union_tag_set
    verbosity: 2

- set_fact:
    tailscale_tag_map: "{{ dict(union_tag_set | zip(union_tag_set|map('replace', ':', '_'))) }}"
- debug:
    var: tailscale_tag_map
    verbosity: 2

- set_fact:
    tailscale_tag_set: "{{ tailscale_tag_map.keys() | list | join(',') }}"
- debug:
    var: tailscale_tag_set
    verbosity: 2

- name: Connect machine to tailscale
  command: "tailscale up -authkey {{ tailscale_authkey }} --advertise-tags '{{ tailscale_tag_set }}'"
  when:
    - status.rc|int != 0
    - not tailscale_router|bool
    - not authorization.failed
  register: tailscale_node
  changed_when: tailscale_node.rc|int == 0
  #no_log: true

- name: Setup
  when: tailscale_router|bool
  sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_set: true
    state: present
    reload: true
  loop:
    - 'net.ipv4.ip_forward'
    - 'net.ipv6.conf.all.forwarding'

- name: Connect subnet router to tailscale
  command: "tailscale up -authkey {{ tailscale_authkey }} --advertise-routes={{ tailscale_routes }} --advertise-tags {{ tailscale_tag_set }} {{ tailscale_args }}"
#  no_log: true
  when:
    - status.rc|int != 0
    - tailscale_router|bool
    - not authorization.failed
  register: router_status
  changed_when: router_status.rc|int == 0

- name: Check ip address
  command: tailscale ip
  register: ip_check
  failed_when: false
  changed_when: false

- name: Set tailscale_ip fact
  when: ip_check.rc|int == 0
  set_fact:
    tailscale_ip: "{{ ip_check.stdout_lines[0] }}"

- name: Check status
  command: "tailscale status | grep {{inventory_hostname}}"
  changed_when: false
  failed_when: status.rc|int > 1
  register: status_check

- name: Display tailscale_ip
  debug:
    msg: "{{ status_check.stdout_lines }}"
    verbosity: 1
...
